name: Create Post from Issue

on:
  issues:
    types: [opened, edited]

jobs:
  create-post:
    # Check if issue was created from the new-post template
    if: contains(github.event.issue.body, '### Access Code')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue and create post
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            const issueTitle = issue.title;
            
            // Parse the issue body to extract form data BEFORE modifying it
            const accessCodeMatch = body.match(/### Access Code\s*\n\s*(.+)/);
            const contentMatch = body.match(/### Content\s*\n\s*([\s\S]+?)(?=\n###|$)/);
            
            const accessCode = accessCodeMatch ? accessCodeMatch[1].trim() : '';
            let contentField = contentMatch ? contentMatch[1].trim() : '';
            
            // Debug: Log the raw content field
            console.log('Raw content field:', contentField);
            console.log('Full issue body:', body);
            
            // Get today's date in DD-MM-YYYY format
            const today = new Date();
            const day = String(today.getDate()).padStart(2, '0');
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const year = today.getFullYear();
            const date = `${day}-${month}-${year}`;
            
            // Password check (do this BEFORE hiding the code)
            const CORRECT_PASSWORD = 'iloveyuki';
            
            if (accessCode !== CORRECT_PASSWORD) {
              // IMMEDIATELY hide the access code even on failure
              const cleanedBody = body.replace(/### Access Code\s*\n\s*.+/, '### Access Code\n\nüîí *Access code hidden for security*');
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: cleanedBody
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚ùå **Incorrect access code!** This post will not be published.'
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                labels: ['invalid']
              });
              
              core.setFailed('Incorrect access code provided');
              return;
            }
            
            // Extract the post title from issue title (remove "[POST] " prefix)
            const postTitle = issueTitle.replace(/^\[POST\]\s*/, '').trim();
            
            // Validate that title was provided
            if (!postTitle || postTitle.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚ùå **Missing post title!** Please edit the issue title to add your post text after "[POST] ".'
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['invalid']
              });
              
              core.setFailed('Post title is required');
              return;
            }
            
            // Extract image URLs from content field (GitHub automatically uploads images)
            // Support both markdown format and HTML img tags
            const imageUrls = [];
            
            // Match markdown images: ![alt](url)
            const markdownRegex = /!\[.*?\]\((https?:\/\/[^\)]+)\)/g;
            let match;
            while ((match = markdownRegex.exec(contentField)) !== null) {
              imageUrls.push(match[1]);
            }
            
            // Match HTML img tags: <img src="url" ...>
            const htmlRegex = /<img[^>]+src=["'](https?:\/\/[^"']+)["']/g;
            while ((match = htmlRegex.exec(contentField)) !== null) {
              imageUrls.push(match[1]);
            }
            
            // Match plain GitHub URLs that might be images/videos
            const urlRegex = /https:\/\/(?:github\.com\/user-attachments\/assets|private-user-images\.githubusercontent\.com)\/[^\s<>)]+/g;
            while ((match = urlRegex.exec(contentField)) !== null) {
              if (!imageUrls.includes(match[0])) {
                imageUrls.push(match[0]);
              }
            }
            
            console.log('Extracted image URLs:', imageUrls);
            
            // Validate that at least one image was provided
            if (imageUrls.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚ùå **Missing image!** Please drag and drop at least one image into the Content field.\n\n**Debug info:** Content field was: `' + contentField.substring(0, 200) + '`'
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['invalid']
              });
              
              core.setFailed('At least one image is required');
              return;
            }
            
            // Use the issue title as the post content
            const content = postTitle;
            
            // AFTER successful validation, hide the access code
            const cleanedBody = body.replace(/### Access Code\s*\n\s*.+/, '### Access Code\n\nüîí *Access code hidden for security*');
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: cleanedBody
            });
            
            // Create new post object
            const newPost = {
              date: date,
              content: content,
              images: imageUrls
            };
            
            // Read current posts.json
            const fs = require('fs');
            const postsPath = 'posts.json';
            let posts = [];
            
            try {
              const postsContent = fs.readFileSync(postsPath, 'utf8');
              posts = JSON.parse(postsContent);
            } catch (error) {
              console.log('Error reading posts.json, starting fresh:', error);
            }
            
            // Add new post to the beginning
            posts.push(newPost);
            
            // Write back to posts.json
            fs.writeFileSync(postsPath, JSON.stringify(posts, null, 4) + '\n');
            
            console.log('Post added successfully!');
            core.setOutput('post-added', 'true');
            core.setOutput('post-data', JSON.stringify(newPost, null, 2));

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add posts.json
          git commit -m "Add new post from issue #${{ github.event.issue.number }}" || exit 0
          git push

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚úÖ **Post published successfully!** Your post has been added to the website.\n\nThe website will update in a few minutes. You can close this issue now.'
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['published']
            });
